//
//  GeometryReaderUseCase.swift
//  IntermediateLevelSwiftUI
//
//  Created by Yunus Emre Berdibek on 20.04.2024.
//

import SwiftUI

// https://medium.com/turkishkit/swiftui-geometryreader-f02a93c4df78

// Kullanƒ±lan ekranƒ±n boyutunu ve lokasyonunu bize verir. Imkan olduk√ßa kullanmamaya √∂zen g√∂sterelim. Landscape ve portrait mode'a g√∂re aynƒ± b√ºy√ºkl√ºkte ekranlar tasarlamak i√ßin iyidir.
// Geometry global koordinatlar i√ßinde view'in nerede olduƒüunu'da s√∂yler
struct GeometryReaderUseCase: View {
    func getPercentage(geo: GeometryProxy) -> Double {
        let maxDistance = UIScreen.main.bounds.width / 2 // center of the screen
        let currentX = geo.frame(in: .global).midX // mevcut olunan ekran i√ßinde

        return Double(1 - (currentX / maxDistance))
    }

    var body: some View {
//        GeometryReader { geometry in
//            HStack(spacing: .zero) {
//                Rectangle().fill(.red)
//                    .frame(width: geometry.size.width * 0.666)
//
//                Rectangle().fill(.blue)
//            }
//            .ignoresSafeArea()
//        }

        ScrollView(.horizontal) {
            HStack {
                ForEach(0 ..< 50, id: \.self) { _ in
                    GeometryReader { geometry in
                        RoundedRectangle(cornerRadius: 20)
                            .rotation3DEffect(
                                .init(degrees: getPercentage(geo: geometry) * 40),
                                axis: (x: 0.0, y: 1.0, z: 0.0))
                    }
                    .frame(width: 300, height: 250)
                    .padding()
                }
            }
        }
        .scrollIndicators(.hidden)
    }
}

#Preview {
    GeometryReaderUseCase()
}

/*
 üöÄ Giri≈ü
 GeometryReader i√ßerisine istediƒüiniz SwiftUI g√∂r√ºn√ºmlerini yerle≈ütirebilirsiniz. Bu √∂rnekte daha √∂nce b√ºy√ºk ihtimalle kullandƒ±ƒüƒ±nƒ±z Rectangle() g√∂r√ºn√ºm√º ile bir dikd√∂rtgen olu≈üturup onu bir GeometryReader i√ßine atƒ±yoruz. GeometryReader , GeometryProxy tipinde bir parametreye sahip ‚Äî a≈üaƒüƒ±daki, √∂rnekte buna geoReader ismini verdim. Bu parametre okunan deƒüerlere eri≈ümemizi saƒülƒ±yor. A≈üaƒüƒ±da kƒ±sa kenarƒ± okunan enin yarƒ±sƒ± ve uzun kenarƒ± okunan boyun yarƒ±sƒ± olan bir dikd√∂rtgen olu≈üturuyoruz.

 GeometryReader { geoReader in
     Rectangle()
         .foregroundStyle(.mint)
         .frame(width: geoReader.size.width * 0.5, height: geoReader.size.height * 0.5)
 }

 üí°ƒ∞pucu: Xcode 13 ve sonrasƒ± ile artƒ±k √∂nizlemede (preview) kullandƒ±ƒüƒ±nƒ±z cihazƒ±n ekran y√∂n√ºn√º istediƒüiniz gibi ayarlayabiliyorsunuz!

 Normal ≈üartlar altƒ±nda SwiftUI g√∂r√ºn√ºmleri ekranƒ±n ortasƒ±na hizalarken, g√∂rd√ºƒü√ºn√ºz gibi GeometryReader kullanƒ±rken ekranƒ±n sol-√ºst k√∂≈üesine hizalanƒ±yor.

 GeometryReader , diƒüer √ßoƒüu SwiftUI g√∂r√ºn√ºmden farklƒ± olarak kaplayabileceƒüi kadar √ßok alan kaplamak istiyor. Ancak bu her zaman istediƒüiniz bir ≈üey olamayabilir ‚Äî mesela her daim tam ekran √ßalƒ±≈ümayan uygulamalarda. Bunun gibi durumlarda bir frame niteleyicisiyle kapladƒ±ƒüƒ± alanƒ± sƒ±nƒ±rlandƒ±rmalƒ±sƒ±nƒ±z.

 Ancak GeometryReader , bir overlay ya da background g√∂r√ºn√ºm√ºn√ºn i√ßinde kullanƒ±ldƒ±ƒüƒ±nda kapsayƒ±cƒ± g√∂r√ºn√ºm√ºn√ºnden daha fazla yer kaplayamadƒ±ƒüƒ±ndan aynƒ± sorun ile kar≈üƒ±la≈ümƒ±yoruz.

 Ayrƒ±ca GeometryReader sƒ±k olarak kullandƒ±ƒüƒ±mƒ±z HStack ve benzeri g√∂r√ºn√ºmlerin otomatik olarak saƒüladƒ±ƒüƒ± bo≈üluƒüu ya da i√ßindeki herhangi bir g√∂r√ºn√ºm√ºn offset deƒüerine algƒ±lamƒ±yor. Bu da mesela iki tane ekranƒ±n yarƒ±sƒ± kadar ene sahip g√∂r√ºn√ºm√º yan yana koymaya √ßalƒ±≈ütƒ±ƒüƒ±nƒ±zda dƒ±≈üarƒ± ta≈ümaya neden olabilir. √ústesinden gelmek i√ßin a≈üaƒüƒ±daki gibi kullandƒ±ƒüƒ±nƒ±z HStack vb. g√∂r√ºn√ºn√ºn spacing parametresine nil deƒüerini atamalƒ±sƒ±nƒ±z.

 GeometryReader { geoReader in
     HStack(spacing: nil) {...}
 }
 üîé Diƒüer Ayrƒ±ntƒ±lar
 G√ºvenli B√∂lge Payƒ±
 GeometryProxy ‚Äònin safeAreaInsets parametresiyle g√∂r√ºn√ºm√ºz√ºn; saat, operat√∂r bilgisi, ve ana ekran √ßizgisi gibi sistem aray√ºz elemanlarƒ±yla √ßakƒ±≈ümamasƒ± i√ßin her bir kenardan bƒ±rakƒ±lmasƒ± gereken bo≈üluk miktarƒ±na eri≈üebilirsiniz. A≈üaƒüƒ±da kullanƒ±mƒ±nƒ± g√∂rmektesiniz.

 geoReader.safeAreaInsets.top      // √úst
 geoReader.safeAreaInsets.bottom   // Alt
 geoReader.safeAreaInsets.leading  // Sol
 geoReader.safeAreaInsets.trailing // Saƒü
 Koordinat Alanlarƒ±
 GeometryReader bize ayrƒ±ca koordinatlar da saƒülayabiliyor. Mesela GeometryReader ‚Äòƒ±n cihaz ekranƒ±na g√∂re g√ºvenli alan (safe area) g√∂rmezden gelinerek hesaplanan x eksenindeki orta noktasƒ±na, global koordinat alanƒ±nƒ± kullanan a≈üaƒüƒ±daki kod ile eri≈üebilirsiniz.

 geoReader.frame(in: .global).midX
 Aynƒ± konumu cihaz ekranƒ±nƒ±n ortasƒ±na g√∂re deƒüil de GeometryReader ‚Äòƒ±n i√ßinde bulunduƒüu, yani kapsayƒ±cƒ± g√∂r√ºn√ºm√ºn ortasƒ±na g√∂re ‚Äî mesela bir VStack ya da ba≈üka bir GeometryReader ‚Äî hesaplamak isteseydik de global yerine local koordinat alanƒ±nƒ± kullanmamƒ±z gerekirdi.

 geoReader.frame(in: .local).midX

 */
